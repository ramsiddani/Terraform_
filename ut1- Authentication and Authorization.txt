========================== Toolssets ======================
- Terraform
- CloudFormation
- Ansible
- Cheff
- Puppet

========================= Terraform =======================

- Supports multiple platforms, 100s of providers
- Easy Integration with configuration management tools like Ansible..
- Simple configuration language and faster learning..


======================== Authentication and Authorization ===============

- Authentication is  the proces of verifying who the user is..
- Authorization is the process of verifying what user have the access to..

Terraform needs access credentials with relevant permissions to create and manage the services..

======================== Create EC2 Instance from terraform ================

provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "first_ec2" {
  ami = "ami-0c7217cdde317cfec"
  instance_type = "t2.micro"

  tags = {
    Name = "first_ec2"
  }
}

$ terraform init  ---> It downloads the appropriate plugins associated with the providers that we have. downloaded to .terraform Directory
$ terraform plan  ---> Shows the resources that intended to create
$ terraform apply ---> To create the resources
$ terraform destroy ---> To destroy the resources

====================== Providers ====================

Terraform supports mulriple providers. 
Depending upon what type of infrastructure we want to launch, we have to use appropriate providers...

provider "aws" {
  region = "us-east-1"
}

===================== Resources ====================

Whenever we want to create a new resource, any provider we have to specify the resource block.

resource "aws_instance" "first_ec2" {
  ami = "ami-0c7217cdde317cfec"
  instance_type = "t2.micro"

  tags = {
    Name = "first_ec2"
  }  
  
-- Terraform destroy

The -target option can be used to terraform destroy only specific resource...



-- Resource Block 

Resource Block declares a resource type ("aws_instance") with a  given local name ("first_ec2")
resource type can't be modified, local name we can modify.

Given local name must be unique to create multiple EC2 instances...

Terraform requires explicit source information for any providers that are not maintained by Hashicorp, using a syntax required_providers nested block
inside the terraform configuration block

terraform {
  required_providers {
    digitalocean = {
      source  = "digitalocean/digitalocean"
    }
  }
}

-- Provider Versoining

During terraform init, if version argument is not specified, the most recent provider will be downloaded during the initilization.
If any error like Could not retrieve the list of available versions for provider hashicorp/aws: locked provider then delete the terraform.lock file.
because the lock file is already set the desired version.

terraform {
  required_providers {
    aws = {
        source = "hashicorp/aws"
        version = "~> 4.0"
    }
  }
}
provider "aws" {
    region = "us-east-1"
}

$ terraform init -upgrade  --> It will find the latest version of the provider based on the constraints we have set.

-- Dependency Lock file

Allows us to lock to a specific version of the provider.

-- Terraform refresh

$ terraform refresh --> To check the latest state of the infrastructure and update the state file accordingly...

terraform refresh function is already performed by plan and apply operations so we don't have to do manually...









